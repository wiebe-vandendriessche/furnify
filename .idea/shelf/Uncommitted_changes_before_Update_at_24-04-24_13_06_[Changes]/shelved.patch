Index: project/src/sidebar/Sidebar.jsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import \"./Sidebar.css\"\r\nimport { useState } from \"react\";\r\nimport { IconContext } from \"react-icons\"\r\nimport { FaAnglesRight, FaAnglesLeft } from \"react-icons/fa6\"\r\nimport Questionnaire_func from \"./components_sidebar/Questionnaire_func.jsx\";\r\nimport Contact from \"./components_sidebar/Contact\";\r\nimport logo from \"../assets/logo_lm.png\";\r\nimport logo_dm from \"../assets/logo_dm.png\";\r\nimport Questionnaire_space from \"./components_sidebar/Questionnaire_space.jsx\";\r\nimport Questionnaire_specs from \"./components_sidebar/Questionnaire_specs.jsx\";\r\nimport { AiOutlineClose, AiOutlineMenu } from \"react-icons/ai\";\r\nimport { check } from \"../algorithm/module_choice.ts\";\r\nimport { useConfiguratorContext } from \"../contexts/ConfiguratorContext.jsx\";\r\nimport {useContactContext} from \"../contexts/ContactContext.jsx\"\r\nimport {useVariaContext} from \"../contexts/VariaContext.jsx\"\r\nimport jsonp from \"jsonp\";\r\nimport {Form} from \"react-bootstrap\";\r\nimport Q1 from \"./components_sidebar/Q1.jsx\";\r\n\r\n\r\n\r\nexport function Sidebar() {\r\n    const [sidebar, setSidebar] = useState(true);\r\n    const [part, showPart] = useState(0);\r\n    const [stateId, setStateId] = useState(1);\r\n    const value = useConfiguratorContext();\r\n    const showSidebar = () => {\r\n        setSidebar(!sidebar);\r\n    }\r\n    const previousPart = () => {\r\n        showPart(part - 1)\r\n    }\r\n    const nextPart = () => {\r\n        showPart(part + 1)\r\n    }\r\n    const showPrevious = () => {\r\n        return part == 0;\r\n    }\r\n    const showNext = () => {\r\n        return part == 4;\r\n    }\r\n    const { contact } = useContactContext();\r\n\r\n    const { dimensions,functionalities,specs,obstacles} = useConfiguratorContext();\r\n\r\n    const {varia} = useVariaContext();\r\n\r\n\r\n    const showNextPart = () => {\r\n        switch (part) {\r\n            case 0:\r\n                return <Questionnaire_space />\r\n            case 1:\r\n                return <Q1 stateId={stateId} setStateId={setStateId}/>\r\n            case 2:\r\n                return <Questionnaire_func />\r\n            case 3:\r\n                return <Questionnaire_specs />\r\n            case 4:\r\n                check(value)\r\n                return <Contact/>\r\n            case 5:\r\n                return <p>Nothing to see here</p>\r\n            default:\r\n                return <p>This is some default text</p>\r\n        }\r\n    }\r\n\r\n\r\n\r\n    const onSubmit = e => {\r\n        e.preventDefault();\r\n        let obs = \"_\";\r\n        Object.entries(obstacles).forEach(([type, items]) => {\r\n            items.forEach((item) => {\r\n                obs += item.id + \". \" + item.type;\r\n                switch (item.type) {\r\n                    case 'window':\r\n                        if (item.inside_window === 'yes') {\r\n                            obs += \" open on the inside\";\r\n                        } else {\r\n                            obs += \" open on the outside\";\r\n                        }\r\n                        obs += \" width:\" + item.width + \" height:\" + item.height;\r\n                        break;\r\n                    case 'door':\r\n                        obs += \" open \" + item.opening_door;\r\n                        obs += \" width:\" + item.width + \" height:\" + item.height;\r\n                        break;\r\n                    default:\r\n                        obs += \" width:\" + item.width + \" length:\" + item.obstLength + \" height:\" + item.height;\r\n                        break;\r\n                }\r\n                if (item.obstacleWall) {\r\n                    obs += \" obstacle wall:\" + item.obstacleWall;\r\n                }\r\n                if (item.windowWall) {\r\n                    obs += \" window wall:\" + item.windowWall;\r\n                }\r\n                if (item.windowXpos && item.windowYpos) {\r\n                    obs += \" position:\" + item.windowXpos + \",\" + item.windowYpos;\r\n                }\r\n                obs += \"\\n\";\r\n            });\r\n        });\r\n\r\n        let dim=\"\"\r\n        Object.entries(dimensions).map(([key, value]) => (\r\n            dim+=key+\":\"+value+\" \"\r\n        ));\r\n\r\n        let func = \"\";\r\n        Object.entries(functionalities).forEach(([key, value]) => {\r\n            if (value) {\r\n                func += key+\" \";\r\n            }\r\n        });\r\n\r\n        let color = specs.color === \"#FFFFFF\" ? \"black\" : \"white\";\r\n\r\n        const url = 'https://hotmail.us18.list-manage.com/subscribe/post-json?u=dbf86de75caa0bdaee7da1262&amp;id=18a2dee28f&amp;f_id=00ed11e1f0';\r\n        jsonp(`${url}&EMAIL=${contact.email}&FIRSTNAME=${contact.firstname}&LASTNAME=${contact.lastname}&ADDRESS=${contact.address}\r\n                    &DIMENSIONS=${dim}&ROOM=${varia.room}&FUNCTIONAL=${func}&LAYOUT=${specs.layout}&MATERIAL=${specs.material}\r\n                    &COLOR=${color}&OBSTACLES=${obs}&REQ=${varia.requirements}`, { param: 'c' }, (_, data) => {\r\n            const { msg, result } = data\r\n            console.log(result,msg)\r\n            alert(msg);\r\n        });\r\n    };\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n            <IconContext.Provider value={{ color: \"undefined\" }}>\r\n\r\n                <nav className={sidebar ? \"nav-menu active\" : \"nav-menu\"}>\r\n\r\n                    <div className=\"overflow-y\">\r\n                        <a id=\"a\" href={\"https://www.furnifyhome.eu/\"}>\r\n                            <picture>\r\n                                <source srcSet={logo_dm} media=\"(prefers-color-scheme: dark)\" />\r\n                                <img id=\"logo\" src={logo} alt=\"furnify\" />\r\n                            </picture>\r\n                        </a>\r\n                        <Form onSubmit={onSubmit}>\r\n                            {showNextPart()}\r\n                        </Form>\r\n\r\n                        <div className=\"bottom_btn\">\r\n                            <button data-testid=\"btn-nav-sidebar-previous\" onClick={previousPart} hidden={showPrevious()}><FaAnglesLeft /></button>\r\n                            <button data-testid=\"btn-nav-sidebar-next\" onClick={nextPart} hidden={showNext()}><FaAnglesRight /></button>\r\n                        </div>\r\n\r\n                    </div>\r\n                </nav>\r\n                <div onClick={showSidebar} className=\"menu-bars\">\r\n                    {sidebar ? <AiOutlineClose size={40} /> : <AiOutlineMenu size={40} />}\r\n                </div>\r\n\r\n            </IconContext.Provider>\r\n        </>\r\n    )\r\n    }\r\n\r\n    export default Sidebar;\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/project/src/sidebar/Sidebar.jsx b/project/src/sidebar/Sidebar.jsx
--- a/project/src/sidebar/Sidebar.jsx	(revision ae218a506a52f4e27c187e4a0e78f5e5a5a56ec3)
+++ b/project/src/sidebar/Sidebar.jsx	(date 1713873477153)
@@ -70,37 +70,40 @@
 
     const onSubmit = e => {
         e.preventDefault();
-        let obs = "_";
+        let obs = "";
         Object.entries(obstacles).forEach(([type, items]) => {
             items.forEach((item) => {
-                obs += item.id + ". " + item.type;
+                obs += item.id + ".";
                 switch (item.type) {
                     case 'window':
+                        obs+="W";
                         if (item.inside_window === 'yes') {
-                            obs += " open on the inside";
+                            obs += " in";
                         } else {
-                            obs += " open on the outside";
+                            obs += " out";
                         }
-                        obs += " width:" + item.width + " height:" + item.height;
+                        obs += " w:" + item.width + "h:" + item.height;
                         break;
                     case 'door':
-                        obs += " open " + item.opening_door;
-                        obs += " width:" + item.width + " height:" + item.height;
+                        obs+="D";
+                        obs += " " + item.opening_door;
+                        obs += " w:" + item.width + "h:" + item.height;
                         break;
                     default:
-                        obs += " width:" + item.width + " length:" + item.obstLength + " height:" + item.height;
+                        obs+="O";
+                        obs += " w:" + item.width + "l:" + item.obstLength + "h:" + item.height;
                         break;
                 }
-                if (item.obstacleWall) {
-                    obs += " obstacle wall:" + item.obstacleWall;
+                if (item.obstacleWall || item.windowWall) {
+                    obs += " wall:" + item.obstacleWall;
                 }
                 if (item.windowWall) {
-                    obs += " window wall:" + item.windowWall;
+                    obs += " wall:" + item.windowWall;
                 }
                 if (item.windowXpos && item.windowYpos) {
                     obs += " position:" + item.windowXpos + "," + item.windowYpos;
                 }
-                obs += "\n";
+                obs += "/\n";
             });
         });
 
@@ -119,9 +122,13 @@
         let color = specs.color === "#FFFFFF" ? "black" : "white";
 
         const url = 'https://hotmail.us18.list-manage.com/subscribe/post-json?u=dbf86de75caa0bdaee7da1262&amp;id=18a2dee28f&amp;f_id=00ed11e1f0';
+        const link = `${url}&EMAIL=${contact.email}&FIRSTNAME=${contact.firstname}&LASTNAME=${contact.lastname}&ADDRESS=${contact.address}
+                    &DIMENSIONS=${dim}&ROOM=${varia.room}&FUNCTIONAL=${func}&LAYOUT=${specs.layout}&MATERIAL=${specs.material}
+                    &COLOR=${color}&OBSTACLES=${obs}&REQ=${varia.requirements}`
+        console.log(link)
         jsonp(`${url}&EMAIL=${contact.email}&FIRSTNAME=${contact.firstname}&LASTNAME=${contact.lastname}&ADDRESS=${contact.address}
                     &DIMENSIONS=${dim}&ROOM=${varia.room}&FUNCTIONAL=${func}&LAYOUT=${specs.layout}&MATERIAL=${specs.material}
-                    &COLOR=${color}&OBSTACLES=${obs}&REQ=${varia.requirements}`, { param: 'c' }, (_, data) => {
+                    &COLOR=${color}&OBSTACLES=${obs}&REQ=${varia.requirements}&LINK=${link}`, { param: 'c' }, (_, data) => {
             const { msg, result } = data
             console.log(result,msg)
             alert(msg);
Index: project/src/sidebar/components_sidebar/Q1.jsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import \"../../App.css\"\r\nimport {useEffect} from \"react\";\r\nimport \"./Questionnaire.css\"\r\nimport {useConfiguratorContext} from \"../../contexts/ConfiguratorContext.jsx\";\r\nimport Obstruction from \"./Obstruction.jsx\";\r\nimport Form from 'react-bootstrap/Form';\r\nimport Button from 'react-bootstrap/Button';\r\nimport {useTranslation} from 'react-i18next'\r\nimport Window from \"./Window.jsx\";\r\nimport Door from \"./Door.jsx\";\r\n\r\n\r\nexport function Q1({stateId, setStateId}) {\r\n    //i18n\r\n    const {t, i18n} = useTranslation();\r\n    useEffect(() => {\r\n        const lng = navigator.language;\r\n        i18n.changeLanguage(lng);\r\n    }, [])\r\n\r\n    const sortObstacles = (list1, list2, list3) => {\r\n        //merge the lists\r\n        const allObsts = [...list1, ...list2, ...list3];\r\n        console.log(\"BEGIN\")\r\n        console.log(allObsts)\r\n        // sort the list according to id\r\n        allObsts.sort((a, b) => a.id - b.id);\r\n        console.log(\"EINDE\")\r\n        console.log(allObsts)\r\n        return allObsts;\r\n    }\r\n\r\n    function createObstacle(valueType) {\r\n        switch (valueType) {\r\n            case \"door\":\r\n                return {\r\n                    type: valueType,\r\n                    width: 0,\r\n                    height: 0,\r\n                    id: stateId,\r\n                    opening_door: \"right\",\r\n                    obstacleWall: \"front\",\r\n                    doorXpos: 0\r\n                };\r\n            case \"window\":\r\n                return {\r\n                    type: valueType,\r\n                    width: 0,\r\n                    height: 0,\r\n                    id: stateId,\r\n                    windowWall: \"front\",\r\n                    inside_window: \"no\",\r\n                    windowXpos: 0,\r\n                    windowYpos: 0\r\n                };\r\n            default:\r\n                return {\r\n                    type: valueType,\r\n                    width: 0,\r\n                    height: 0,\r\n                    obstLength: 0,\r\n                    id: stateId,\r\n                };\r\n        }\r\n    }\r\n\r\n    //Uses reactcontext\r\n    const {obstacles, setObstacles} = useConfiguratorContext();\r\n\r\n    //Changes values of dimensions in context\r\n\r\n    const changeObstacle = (event) => {\r\n        console.log(event)\r\n        console.log(event.target)\r\n        console.log(event.target.name);\r\n        console.log(event.target.value)\r\n        setObstacles({\r\n            ...obstacles,\r\n            other: obstacles[\"other\"].map((obstacle) => obstacle.id == event.target.id.split(\"obst\")[1] ? {\r\n                    ...obstacle,\r\n                    [event.target.name]: event.target.value\r\n                } :\r\n                obstacle)\r\n        })\r\n    }\r\n\r\n\r\n    const changeDoor = (event) => {\r\n        console.log(\"VERANDERING\");\r\n        console.log(\"ID:\" + event.target.id);\r\n        console.log(\"NAME:\" + event.target.name)\r\n        setObstacles({\r\n            ...obstacles,\r\n            door: obstacles[\"door\"].map((obstacle) => obstacle.id == event.target.id.split(\"door\")[1] ? {\r\n                ...obstacle,\r\n                [event.target.name]: event.target.value\r\n            } : obstacle)\r\n        })\r\n    }\r\n    const changeWindow = (event) => {\r\n        setObstacles({\r\n            ...obstacles,\r\n            window: obstacles[\"window\"].map((obstacle) => obstacle.id == event.target.id.split(\"window\")[1] ? {\r\n                ...obstacle,\r\n                [event.target.name]: event.target.value\r\n            } : obstacle)\r\n        })\r\n    }\r\n\r\n\r\n    //Opening door done separate, because it doesn't work otherwise\r\n    const changeOpeningDoor = (event) => {\r\n        let param = event.target.getAttribute(\"controlid\").split(\"-\");\r\n        console.log(\"SPLIT:\" + param);\r\n        console.log(param[0]);\r\n        console.log(param[2].split(\"door\"))\r\n        setObstacles({\r\n            ...obstacles,\r\n            door: obstacles[\"door\"].map((obstacle) => obstacle.id == param[2].split(\"door\")[1] ? {\r\n                ...obstacle,\r\n                [param[1]]: param[0]\r\n            } : obstacle)\r\n        })\r\n\r\n    }\r\n    const changeOpeningWindow = (event) => {\r\n        let param = event.target.getAttribute(\"controlid\").split(\"-\");\r\n        console.log(\"SPLIT:\" + param);\r\n        console.log(param[0]);\r\n        console.log(param[2].split(\"window\"))\r\n        setObstacles({\r\n            ...obstacles,\r\n            window: obstacles[\"window\"].map((obstacle) => obstacle.id == param[2].split(\"window\")[1] ? {\r\n                ...obstacle,\r\n                [param[1]]: param[0]\r\n            } : obstacle)\r\n        })\r\n\r\n    }\r\n\r\n    const deleteObstacle = (event) => {\r\n        event.preventDefault();\r\n        let obstacleIndex = event.currentTarget.id.split(\"obst\")[1];\r\n        console.log(event.currentTarget.id)\r\n        console.log(\"INDEX\" + obstacleIndex);\r\n        setObstacles((prevObstacles) => ({\r\n            ...prevObstacles,\r\n            other: prevObstacles.other.filter((obstacle) => obstacle.id != obstacleIndex)\r\n        }));\r\n    };\r\n\r\n    const deleteDoorObstacle = (event) => {\r\n        event.preventDefault();\r\n        let obstacleIndex = event.currentTarget.id.split(\"door\")[1];\r\n        console.log(\"ID\" + event.currentTarget.id)\r\n        console.log(\"INDEX\" + obstacleIndex);\r\n        setObstacles((prevObstacles) => ({\r\n            ...prevObstacles,\r\n            door: prevObstacles.door.filter((obstacle) => obstacle.id != obstacleIndex)\r\n        }));\r\n    };\r\n    const deleteWindowObstacle = (event) => {\r\n        event.preventDefault();\r\n        let obstacleIndex = event.currentTarget.id.split(\"window\")[1];\r\n        console.log(\"ID\" + event.currentTarget.id)\r\n        console.log(\"INDEX\" + obstacleIndex);\r\n        setObstacles((prevObstacles) => ({\r\n            ...prevObstacles,\r\n            window: prevObstacles.window.filter((obstacle) => obstacle.id != obstacleIndex)\r\n        }));\r\n    };\r\n\r\n    const addObstacles = (event) => {\r\n        setStateId(stateId + 1)\r\n        const valueType = event.currentTarget.getAttribute(\"value\");\r\n        let obst = createObstacle(valueType);\r\n        if (obstacles[valueType].length > 0) {\r\n            console.log(obstacles[event.currentTarget.getAttribute(\"value\")])\r\n            console.log(\"value: \" + event.currentTarget.getAttribute(\"value\"))\r\n            console.log(stateId)\r\n            setObstacles({\r\n                ...obstacles, [valueType]: [...obstacles[valueType], obst]\r\n            });\r\n        } else {\r\n            console.log(\"value: \" + event.currentTarget.getAttribute(\"value\"))\r\n            setObstacles({\r\n                ...obstacles, [valueType]: [obst]\r\n            });\r\n\r\n\r\n        }\r\n        console.log(stateId)\r\n        console.log(obstacles)\r\n    }\r\n\r\n    console.log(\"OBSTACLES:\")\r\n    console.log(obstacles)\r\n\r\n\r\n    return (\r\n        <div className={\"m-2\"}>\r\n            <Form.Group>\r\n                <div className={\"mb-4\"}>\r\n                    <div className={\"mb-3\"}>\r\n                        <h5 data-testid={\"question-space-aspects\"}>{t('questionnaire_space.q_aspects')}</h5>\r\n                    </div>\r\n                    <div className={\"m-1\"}>\r\n                        <Button data-testid={\"btn-space-aspect-window\"} onClick={addObstacles} variant=\"danger\"\r\n                                value={\"window\"}>\r\n                            {t('obstructions.window')}\r\n                        </Button>\r\n                        <Button data-testid={\"btn-space-aspect-door\"} onClick={addObstacles} variant=\"danger\"\r\n                                value={\"door\"}>\r\n                            {t('obstructions.door')}\r\n                        </Button>\r\n                        <Button data-testid={\"btn-space-aspect-other\"} onClick={addObstacles} variant=\"danger\"\r\n                                value={\"other\"}>\r\n                            {t('obstructions.other')}\r\n                        </Button>\r\n                        <div className={\"aspect\"}>\r\n                            {sortObstacles(obstacles[\"window\"], obstacles[\"door\"], obstacles[\"other\"]).map(item => {\r\n                                console.log(\"item voordien:\");\r\n                                console.log(item);\r\n                                console.log(\"type:\" + item.type);\r\n                                console.log(\"id: \" + item.id);\r\n                                console.log(\"opening:\" + item.opening_door)\r\n                                console.log(\"item nadien:\");\r\n                                console.log(item);\r\n                                if (item.type === \"window\") {\r\n                                    return <Window\r\n                                        obstId={\"window\" + item.id}\r\n                                        type={item.type}\r\n                                        width={item.width}\r\n                                        height={item.height}\r\n                                        insideWindow={item.inside_window}\r\n                                        key={\"obst\" + item.id}\r\n                                        windowXpos={item.windowXpos}\r\n                                        windowYpos={item.windowYpos}\r\n                                        changeOpening={changeOpeningWindow}\r\n                                        changeWindow={changeWindow}\r\n                                        deleteObst={deleteWindowObstacle}\r\n                                        windowWall={item.windowWall}\r\n                                    />;\r\n                                } else if (item.type === \"door\") {\r\n                                    console.log(\"OPENING\");\r\n                                    console.log(item.opening_door);\r\n                                    return <Door\r\n                                        obstId={\"door\" + item.id}\r\n                                        type={item.type}\r\n                                        width={item.width}\r\n                                        height={item.height}\r\n                                        openingDoor={item.opening_door}\r\n                                        key={\"obst\" + item.id}\r\n                                        doorXpos={item.doorXpos}\r\n                                        changeDoor={changeDoor}\r\n                                        changeOpening={changeOpeningDoor}\r\n                                        deleteObst={deleteDoorObstacle}\r\n                                        doorWall={item.obstacleWall}\r\n                                    />;\r\n                                } else {\r\n                                    return <Obstruction\r\n                                        obstId={\"obst\" + item.id}\r\n                                        type={item.type}\r\n                                        length={item.obstLength}\r\n                                        width={item.width}\r\n                                        height={item.height}\r\n                                        key={\"obst\" + item.id}\r\n                                        changeObst={changeObstacle}\r\n                                        deleteObst={deleteObstacle}\r\n                                        obstLength={item.obstLength}\r\n                                    />;\r\n                                }\r\n                            })}\r\n\r\n\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </Form.Group>\r\n        </div>\r\n)\r\n}\r\n\r\nexport default Q1;\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/project/src/sidebar/components_sidebar/Q1.jsx b/project/src/sidebar/components_sidebar/Q1.jsx
--- a/project/src/sidebar/components_sidebar/Q1.jsx	(revision ae218a506a52f4e27c187e4a0e78f5e5a5a56ec3)
+++ b/project/src/sidebar/components_sidebar/Q1.jsx	(date 1713468859790)
@@ -48,7 +48,7 @@
                     width: 0,
                     height: 0,
                     id: stateId,
-                    windowWall: "front",
+                    obstacleWall: "front",
                     inside_window: "no",
                     windowXpos: 0,
                     windowYpos: 0
@@ -239,7 +239,7 @@
                                         changeOpening={changeOpeningWindow}
                                         changeWindow={changeWindow}
                                         deleteObst={deleteWindowObstacle}
-                                        windowWall={item.windowWall}
+                                        windowWall={item.obstacleWall}
                                     />;
                                 } else if (item.type === "door") {
                                     console.log("OPENING");
Index: project/src/sidebar/components_sidebar/Window.jsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import { useState, useEffect } from \"react\";\r\nimport \"./Questionnaire.css\"\r\nimport Form from \"react-bootstrap/Form\";\r\nimport { ButtonGroup, Col, FloatingLabel, Row, ToggleButton } from \"react-bootstrap\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { useRoomWallLightupContext } from \"../../contexts/RoomWallLightupContext.jsx\";\r\n\r\n// eslint-disable-next-line react/prop-types\r\nfunction Window({ windowWall, deleteObst, changeOpening, insideWindow, changeWindow, type, obstId, width, height, windowXpos, windowYpos }) {\r\n    //i18n\r\n    const { t, i18n } = useTranslation();\r\n\r\n    useEffect(() => {\r\n        const lng = navigator.language;\r\n        i18n.changeLanguage(lng);\r\n    }, [])\r\n\r\n    const [showButton1, setShow1] = useState(false);\r\n    const [showButton2, setShow2] = useState(true);\r\n    const showButton = () => {\r\n        setShow2(!showButton2)\r\n        setShow1(!showButton1)\r\n    };\r\n\r\n\r\n\r\n    const { selectedWall, setSelectedWall } = useRoomWallLightupContext();\r\n    const [isButtonDisabled, setIsButtonDisabled] = useState(false);\r\n\r\n    const changeSelectedWall = (wall) => {\r\n        setIsButtonDisabled(true);\r\n        setSelectedWall(wall);\r\n        console.log(\"test changeSelectedWall: \" + wall);\r\n        setTimeout(() => {\r\n            setSelectedWall(null);\r\n            setIsButtonDisabled(false);\r\n            console.log(\"back to zero\");\r\n        }, 1500); // 1000 milliseconds = 1 second\r\n    }\r\n\r\n\r\n    function handleKeyPress(event) {\r\n        //prevent use of negative values\r\n        if (event.charCode == 45) {\r\n            console.log(\"negative value detected\");\r\n            event.preventDefault();\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    console.log(obstId);\r\n    console.log(windowWall)\r\n    console.log(windowXpos);\r\n    console.log(windowYpos);\r\n    console.log(type)\r\n\r\n    return (\r\n        <div className=\"obstruction-bg mb-2 flex\">\r\n            <Button id={\"button\" + obstId}\r\n                    data-testid={\"btn-obstacle-expand-\" + type}\r\n                    variant={\"danger\"} value={type ?? t(\"obstructions.\" + type)}\r\n                    onClick={\r\n                        showButton\r\n                    }>{t(\"obstructions.\" + type)}</Button>\r\n            <Button className={\"fa-rectangle-xmark\"} data-testid={\"btn-obstacle-delete-\" + type}\r\n                    variant={\"danger\"} id={\"delete\" + obstId}\r\n                    onClick={(e) => deleteObst(e)}>\r\n                x\r\n            </Button>\r\n            <div className=\"m-1\" hidden={showButton2}>\r\n                <Form.Group>\r\n                    <div className=\"m-1\">\r\n                        <Row>\r\n                            <Col>\r\n                                <FloatingLabel\r\n                                    controlid={\"width\" + obstId}\r\n                                    label={t('questionnaire_space.width')+ '(cm)'}\r\n                                >\r\n                                    <Form.Control type=\"number\" name={\"width\"} min={0} step={1} defaultValue={width}\r\n                                                  data-testid={\"input-obst-\" + type + \"-width\"}\r\n                                                  onChange={(e) => changeWindow(e)}\r\n                                                  onKeyPress={handleKeyPress}\r\n                                                  id={\"width\"+obstId}\r\n                                    />\r\n\r\n\r\n                                </FloatingLabel>\r\n                            </Col>\r\n                            <Col>\r\n                                <FloatingLabel\r\n                                    controlid={\"height\" + obstId}\r\n                                    label={t('questionnaire_space.height')+ '(cm)'}\r\n                                >\r\n                                    <Form.Control type=\"number\" name={\"height\"} min={0} step={1} defaultValue={height}\r\n                                                  data-testid={\"input-obst-\" + type + \"-height\"}\r\n                                                  onChange={(e) => changeWindow(e)}\r\n                                                  onKeyPress={handleKeyPress}\r\n                                                  id={\"height\"+obstId}\r\n                                    />\r\n                                </FloatingLabel>\r\n                            </Col>\r\n                        </Row>\r\n\r\n                    </div>\r\n                </Form.Group>\r\n\r\n                <Form.Group >\r\n                    <Form.Label data-testid={\"question-obstacle-window-opening\"}>{t('obstructions.q_window.opening_window')}</Form.Label>\r\n                    <div>\r\n                        <ButtonGroup>\r\n                            <ToggleButton\r\n                                className=\"mb-4\"\r\n                                type=\"radio\"\r\n                                variant=\"danger\"\r\n                                name={\"yes\" + obstId}\r\n                                controlid={\"yes-inside_window-\" + obstId}\r\n                                data-testid={\"btn-obstacle-window-inside\"}\r\n                                checked={\"yes\"==insideWindow}\r\n                                onClick={(event) => {\r\n                                    changeOpening(event)\r\n                                }}\r\n                            >{t('obstructions.q_window.yes')} </ToggleButton>\r\n                            <ToggleButton\r\n                                className=\"mb-4\"\r\n                                type=\"radio\"\r\n                                variant=\"danger\"\r\n                                data-testid={\"btn-obstacle-window-outside\"}\r\n                                name={\"no\" + obstId}\r\n                                controlid={\"no-inside_window-\" + obstId}\r\n                                checked={\"no\"==insideWindow}\r\n                                onClick={(event) => {\r\n                                    changeOpening(event)\r\n                                }}\r\n                            >{t('obstructions.q_window.no')}</ToggleButton>\r\n                        </ButtonGroup>\r\n                    </div>\r\n\r\n                    <Row>\r\n                        <Col>\r\n                            <FloatingLabel\r\n                                style={{fontSize: '0.8rem'}}\r\n                                controlid={\"windowXpos\" + obstId}\r\n                                label=\"Window X Position (cm)\"\r\n                            >\r\n                                <Form.Control\r\n                                    type=\"number\"\r\n                                    name={\"windowXpos\"}\r\n                                    min={0} step={1}\r\n                                    value={windowXpos}\r\n                                    onChange={changeWindow}\r\n                                    placeholder=\"Enter X Position (cm)\"\r\n                                    id={\"xpos\"+obstId}\r\n                                />\r\n                            </FloatingLabel>\r\n                        </Col>\r\n                        <Col>\r\n                            <FloatingLabel\r\n                                controlid={\"windowYpos\" + obstId}\r\n                                label=\"Window Y Position (cm)\"\r\n                                style={{fontSize: '0.8rem'}}\r\n                            >\r\n                                <Form.Control\r\n                                    type=\"number\"\r\n                                    value={windowYpos}\r\n                                    name={\"windowYpos\"}\r\n                                    min={0} step={1}\r\n                                    onChange={changeWindow}\r\n                                    placeholder=\"Enter Y Position (cm)\"\r\n                                    id={\"ypos\"+obstId}\r\n                                />\r\n                            </FloatingLabel>\r\n                        </Col>\r\n                    </Row>\r\n\r\n                    <Form.Label data-testid={\"question-obstacle-window-wall\"}>\r\n                        {t(\"obstructions.q_window.window_wall\")}\r\n                    </Form.Label>\r\n                    <div>\r\n                        <ButtonGroup>\r\n                            {/* Add radio buttons for window positions */}\r\n                            {[\"front\", \"back\", \"left\", \"right\"].map((x) => (\r\n                                <ToggleButton\r\n                                    key={x}\r\n                                    className=\"mb-4\"\r\n                                    type=\"radio\"\r\n                                    variant=\"danger\"\r\n                                    name={`windowWall${obstId}`}\r\n                                    controlid={`${x}-windowWall-${obstId}`}\r\n                                    data-testid={`btn-obstacle-window-position-${x}`}\r\n                                    onClick={(e) => {\r\n                                        changeSelectedWall(x);\r\n                                        changeOpening(e);\r\n                                    }}\r\n                                    disabled={isButtonDisabled} // Set button disabled state\r\n                                    checked={x==windowWall}\r\n                                >\r\n                                    {t(`obstructions.q_window.${x}`)}\r\n                                </ToggleButton>\r\n                            ))}\r\n                        </ButtonGroup>\r\n                    </div>\r\n                </Form.Group>\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Window;\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/project/src/sidebar/components_sidebar/Window.jsx b/project/src/sidebar/components_sidebar/Window.jsx
--- a/project/src/sidebar/components_sidebar/Window.jsx	(revision ae218a506a52f4e27c187e4a0e78f5e5a5a56ec3)
+++ b/project/src/sidebar/components_sidebar/Window.jsx	(date 1713873125375)
@@ -7,7 +7,7 @@
 import { useRoomWallLightupContext } from "../../contexts/RoomWallLightupContext.jsx";
 
 // eslint-disable-next-line react/prop-types
-function Window({ windowWall, deleteObst, changeOpening, insideWindow, changeWindow, type, obstId, width, height, windowXpos, windowYpos }) {
+function Window({ obstacleWall, deleteObst, changeOpening, insideWindow, changeWindow, type, obstId, width, height, windowXpos, windowYpos }) {
     //i18n
     const { t, i18n } = useTranslation();
 
@@ -51,7 +51,7 @@
     }
 
     console.log(obstId);
-    console.log(windowWall)
+    console.log(obstacleWall)
     console.log(windowXpos);
     console.log(windowYpos);
     console.log(type)
@@ -186,15 +186,15 @@
                                     className="mb-4"
                                     type="radio"
                                     variant="danger"
-                                    name={`windowWall${obstId}`}
-                                    controlid={`${x}-windowWall-${obstId}`}
+                                    name={`obstacleWall${obstId}`}
+                                    controlid={`${x}-obstacleWall-${obstId}`}
                                     data-testid={`btn-obstacle-window-position-${x}`}
                                     onClick={(e) => {
                                         changeSelectedWall(x);
                                         changeOpening(e);
                                     }}
                                     disabled={isButtonDisabled} // Set button disabled state
-                                    checked={x==windowWall}
+                                    checked={x==obstacleWall}
                                 >
                                     {t(`obstructions.q_window.${x}`)}
                                 </ToggleButton>
